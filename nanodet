import os
import sys
import argparse
import time
import cv2
import numpy as np
from nanodet.model.predictor import Predictor
from nanodet.util import Logger
from nanodet.config import cfg, load_config

# ----------------- Argument Parsing --------------------
parser = argparse.ArgumentParser()
parser.add_argument('--model', required=True, help='Path to NanoDet config (.yml)')
parser.add_argument('--weights', required=True, help='Path to NanoDet model file (.onnx)')
parser.add_argument('--source', required=True, help='Video source: usb0, picamera0')
parser.add_argument('--thresh', default=0.4, type=float, help='Confidence threshold')
parser.add_argument('--resolution', default='640x480', help='Resolution in WxH (e.g., 640x480)')
args = parser.parse_args()

# ----------------- Load Config and Model ----------------
load_config(cfg, args.model)
logger = Logger()
predictor = Predictor(cfg, args.weights, device="cpu", logger=logger)

# ----------------- Camera Setup ------------------------
resW, resH = map(int, args.resolution.split('x'))

if 'usb' in args.source:
    cam_index = int(args.source.replace('usb', ''))
    cap = cv2.VideoCapture(cam_index)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, resW)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, resH)
elif 'picamera' in args.source:
    from picamera2 import Picamera2
    cap = Picamera2()
    cap.configure(cap.create_video_configuration(main={"format": 'RGB888', "size": (resW, resH)}))
    cap.start()
else:
    print("Invalid source input.")
    sys.exit(1)

fps_list = []
while True:
    t0 = time.perf_counter()
    if 'usb' in args.source:
        ret, frame = cap.read()
        if not ret or frame is None:
            print("Camera disconnected.")
            break
    else:
        frame = cap.capture_array()

    results = predictor.inference(frame, timer_enabled=False)

    # Draw results
    for box in results:
        x1, y1, x2, y2 = map(int, box[:4])
        score = float(box[4])
        class_id = int(box[5])
        if score >= args.thresh:
            label = f'{cfg.class_names[class_id]}: {int(score*100)}%'
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, label, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)

    # FPS display
    t1 = time.perf_counter()
    fps = 1 / (t1 - t0)
    fps_list.append(fps)
    if len(fps_list) > 200:
        fps_list.pop(0)
    avg_fps = np.mean(fps_list)
    cv2.putText(frame, f'FPS: {avg_fps:.2f}', (10, 20),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

    cv2.imshow("NanoDet", frame)
    if cv2.waitKey(5) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
print(f"Average FPS: {avg_fps:.2f}")
